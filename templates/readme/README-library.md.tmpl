#import os
[![Download](https://api.bintray.com/packages/conan-community/conan/${name}%3A${user}/images/download.svg) ](https://bintray.com/conan-community/conan/${name}%3A${user}/_latestVersion)
#if os.path.exists(".travis.yml")
[![Build Status Travis](https://travis-ci.org/conan-community/conan-${name}.svg)](https://travis-ci.org/conan-community/conan-${name})
#end if
#if os.path.exists("azure-pipelines.yml")
[![Build Status Azure](https://dev.azure.com/${user}/packages/_apis/build/status/${user}.conan-${name})](https://dev.azure.com/${user}/packages/_build)
#end if
#if os.path.exists("appveyor.yml")
[![Build Status AppVeyor](https://ci.appveyor.com/api/projects/status/github/conan-community/conan-${name}?svg=true)](https://ci.appveyor.com/project/ConanCIintegration/conan-${name})
#end if

#if $homepage
\#\# Conan package recipe for [*${name}*]($getVar('homepage', ''))
#else
\#\# Conan package recipe for *${name}*
#end if

$getVar('description', '')

The packages generated with this **conanfile** can be found on [Bintray](https://bintray.com/conan-community/conan/${name}%3A${user}).


\#\# Issues

If you wish to report an issue or make a request for a package, please do so here:

[Issues Tracker](https://github.com/conan-community/community/issues)


\#\# For Users

\#\#\# Basic setup

    $ conan install ${name}/${version}@${user}/stable

\#\#\# Project setup

If you handle multiple dependencies in your project is better to add a *conanfile.txt*

    [requires]
    ${name}/${version}@${user}/stable

#if $generators
    [generators]
#for $gen in $generators
    ${gen}
#end for
#end if

Complete the installation of requirements for your project running:

    $ mkdir build && cd build && conan install ..

Note: It is recommended that you run conan install from a build directory and not the root of the project directory.  This is because conan generates *conanbuildinfo* files specific to a single build configuration which by default comes from an autodetected default profile located in ~/.conan/profiles/default .  If you pass different build configuration options to conan install, it will generate different *conanbuildinfo* files.  Thus, they should not be added to the root of the project, nor committed to git.


\#\# Build and package

The following command both runs all the steps of the conan file, and publishes the package to the local system cache.  This includes downloading dependencies from "build_requires" and "requires" , and then running the build() method.

    $ conan create . ${user}/${channel}


#if $options
\#\#\# Available Options
| Option        | Default | Possible Values  |
| ------------- |:----------------- |:------------:|
#for $key, $value in $options.items()
#if $key not in $default_options
| ${key}      |                        |  ${value} |
#else
| ${key}      | $default_options[$key] |  ${value} |
#end if
#end for
#end if


\#\# Add Remote

Conan Community has its own Bintray repository, however, we are working to distribute all package in the Conan Center:

    $ conan remote add conan-center "https://conan.bintray.com"


#if $recipe_license
\#\# Conan Recipe License

NOTE: The conan recipe license applies only to the files of this recipe, which can be used to build and package ${name}.
It does *not* in any way apply or is related to the actual software being packaged.

[$recipe_license['license']](LICENSE)
#end if
